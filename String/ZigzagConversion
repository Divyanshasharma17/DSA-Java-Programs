/*
===========================================================
Problem :- Zigzag Conversion
Difficulty :- Medium
===========================================================

Description :-
  The string "PAYPALISHIRING" is written in a zigzag pattern 
  on a given number of rows. After arranging the characters 
  in this pattern, the final result is obtained by reading 
  the rows sequentially.
  Example Pattern for numRows = 3:
  P   A   H   N
  A P L S I I G
  Y   I   R
  Result :- "PAHNAPLSIIGYIR"

Example 1 :
  Input :- s = "PAYPALISHIRING", numRows = 3
  Output :- "PAHNAPLSIIGYIR"

Example 2 :
  Input :- s = "PAYPALISHIRING", numRows = 4
  Output : "PINALSIGYAHRPI"
  Explanation :
  P     I    N
  A   L S  I G
  Y A   H R
  P     I

Example 3 :
  Input : s = "A", numRows = 1
  Output : "A"

Constraints :-
  1)- 1 <= s.length <= 1000
  2)- s consists of English letters (lower-case, upper-case), ',' and '.'.
  3)- 1 <= numRows <= 1000

Approach :-
  1. Handle the base case:
     → If numRows == 1 or the string length is less than numRows, return s directly.
  2. Use an array of StringBuilders to represent rows.
  3. Traverse characters in the input string:
     → Append each character to the current row.
     → Reverse direction when reaching the top or bottom row.
  4. Concatenate all rows to form the final result.

Time Complexity :- O(n)
Space Complexity :- O(n)
===========================================================
*/

Solution :-
  public class ZigzagConversion {
      public String convert(String s, int numRows) {
          if (numRows == 1 || s.length() <= numRows) {
              return s;
          }
          StringBuilder[] rows = new StringBuilder[numRows];
          for (int i = 0; i < numRows; i++) {
              rows[i] = new StringBuilder();
          }
          int currentRow = 0;
          boolean goingDown = false;
          for (char c : s.toCharArray()) {
              rows[currentRow].append(c);
              if (currentRow == 0 || currentRow == numRows - 1) {
                  goingDown = !goingDown;
              }
              currentRow += goingDown ? 1 : -1;
          }
          StringBuilder result = new StringBuilder();
          for (StringBuilder row : rows) {
              result.append(row);
          }
          return result.toString();
      }
  }
