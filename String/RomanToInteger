/*
===========================================================
Problem :- Roman to Integer
Difficulty :- Easy
===========================================================

Description :-
  Roman numerals are represented by seven symbols: I, V, X, L, C, D, and M.  
  Given a Roman numeral string, convert it to an integer.  

Approach :-
  1) Symbols are usually written largest to smallest, left to right.
  2) Subtractive cases:
    I before V (5) or X (10) → 4, 9
    X before L (50) or C (100) → 40, 90
    C before D (500) or M (1000) → 400, 900

Example 1 :-
  Input :- s = "III"
  Output :- 3

Example 2 :-
  Input :- s = "LVIII"
  Output :- 58
  Explanation :- L = 50, V = 5, III = 3

Example 3 :-
  Input :- s = "MCMXCIV"
  Output :- 1994
  Explanation :- M = 1000, CM = 900, XC = 90, IV = 4

Constraints :-
  1)- 1 <= s.length <= 15
  2)- s contains only ('I', 'V', 'X', 'L', 'C', 'D', 'M')
  3)- Valid Roman numeral within range [1, 3999]

Approach :-
  1. Use a HashMap to store Roman symbols and their values.
  2. Traverse the string:
     → Compare current symbol with the next one.
     → If current < next, subtract its value.
     → Otherwise, add its value.
  3. Return the accumulated result.

Time Complexity :- O(n)   
Space Complexity :- O(1)  
===========================================================
*/

Solution :-
import java.util.*;
public class RomanToInteger {
    public int romanToInt(String s) {
        Map<Character, Integer> map = Map.of(
            'I', 1, 'V', 5, 'X', 10,
            'L', 50, 'C', 100, 'D', 500, 'M', 1000
        );
        int result = 0;
        for (int i = 0; i < s.length(); i++) {
            int curr = map.get(s.charAt(i));
            int next = (i + 1 < s.length()) ? map.get(s.charAt(i + 1)) : 0;
            if (curr < next) {
                result -= curr;
            } else {
                result += curr;
            }
        }
        return result;
    }
}
