
Problem :- Add Two Numbers
Difficulty :- Medium
===========================================================

Description :-
  You are given two non-empty linked lists representing two 
  non-negative integers. The digits are stored in reverse order, 
  and each node contains a single digit. Add the two numbers 
  and return the sum as a linked list.

Example 1 :-
  Input :- l1 = [2,4,3], l2 = [5,6,4]
  Output :- [7,0,8]
  Explanation :- 342 + 465 = 807

Example 2 :-
  Input :- l1 = [0], l2 = [0]
  Output :- [0]

Example 3 :-
  Input :- l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
  Output :- [8,9,9,9,0,0,0,1]

Constraints :-
  1) The number of nodes in each linked list is in the range [1, 100].
  2) 0 <= Node.val <= 9
  3) It is guaranteed that the list represents a number that does not have leading zeros.

Approach :-
  1. Initialize a dummy node to simplify list construction.
  2. Traverse both linked lists simultaneously:
     → Add corresponding node values along with any carry.
     → Create a new node for the digit of sum % 10.
     → Update carry = sum / 10.
  3. Continue until both lists are fully traversed and carry is 0.
  4. Return the next node of the dummy as the head of the result list.
  
Time Complexity :- O(max(m, n))
Space Complexity :- O(max(m, n)) 
===========================================================

Solution :-
public class AddTwoNumbers {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;
        int carry = 0;
        while (l1 != null || l2 != null || carry != 0) {
            int sum = carry;
            if (l1 != null) {
                sum += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                sum += l2.val;
                l2 = l2.next;
            }
            carry = sum / 10;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;
        }
        return dummy.next;
    }
}

/**
 * Definition for singly-linked list.
 */
class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}
