
Problem :- Merge Two Sorted Lists
Difficulty :- Easy

Description :-
  You are given the heads of two sorted linked lists list1 
  and list2. Merge the two lists into one sorted list. The 
  list should be made by splicing together the nodes of the 
  first two lists. Return the head of the merged linked list.

Example 1 :-
  Input :- list1 = [1,2,4], list2 = [1,3,4]
  Output :- [1,1,2,3,4,4]

Example 2 :-
Input :- list1 = [], list2 = []
Output :- []

Example 3 :-
Input :- list1 = [], list2 = [0]
Output :- [0]

Constraints :-
  1. The number of nodes in both lists is in the range [0, 50].
  2. -100 <= Node.val <= 100
  3. Both list1 and list2 are sorted in non-decreasing order.

Approach :-
  1. Initialize a dummy node to simplify list construction.
  2. Use a pointer (current) to build the merged list.
  3. Traverse both lists:
     → Compare current nodes of list1 and list2.
     → Append the smaller node to current, then move forward.
  4. Attach the remaining nodes from list1 or list2.
  5. Return dummy.next as the head of the merged list.

Time Complexity :- O(m + n)
Space Complexity :- O(1)
===========================================================

Solution :-
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  class Solution {
      public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
          ListNode dummy = new ListNode(-1);
          ListNode current = dummy;
  
          while (list1 != null && list2 != null) {
              if (list1.val <= list2.val) {
                  current.next = list1;
                  list1 = list1.next;
              } else {
                  current.next = list2;
                  list2 = list2.next;
              }
              current = current.next;
          }
  
          if (list1 != null) {
              current.next = list1;
          } else {
              current.next = list2;
          }
  
          return dummy.next;
      }
  }
