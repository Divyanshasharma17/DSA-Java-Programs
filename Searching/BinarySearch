/*
===========================================================
Problem :- Search Insert Position
Difficulty :- Easy
===========================================================

Description :-
  Given a sorted array of distinct integers nums and a target 
  value, return the index if the target is found. If not, 
  return the index where it would be if it were inserted in order.
  You must write an algorithm with O(log n) runtime complexity.

Example 1 :
  Input :- nums = [1,3,5,6], target = 5
  Output :- 2

Example 2 :
  Input :- nums = [1,3,5,6], target = 2
  Output :- 1

Example 3 :
  Input :- nums = [1,3,5,6], target = 7
  Output :- 4

Constraints :-
  1)- 1 <= nums.length <= 10^4
  2)- -10^4 <= nums[i] <= 10^4
  3)- nums contains distinct values sorted in ascending order.
  4)-10^4 <= target <= 10^4

Approach :-
  1. Use binary search to find the target.
  2. Initialize start and end pointers for the array bounds.
  3. While start <= end:
     - Calculate mid = (start + end) / 2.
     - If nums[mid] == target, return mid.
     - If nums[mid] > target, move end = mid - 1.
     - If nums[mid] < target, move start = mid + 1.
  4. Return start as the insertion index if target is not found.

Time Complexity :- O(log n)
Space Complexity :- O(1)
===========================================================
*/

Solution :-
  public class SearchInsertPosition {
      public int searchInsert(int[] nums, int target) {
          int start = 0;
          int end = nums.length - 1;
          while (start <= end) {
              int mid = (start + end) / 2;
              if (nums[mid] == target) {
                  return mid;
              } else if (nums[mid] > target) {
                  end = mid - 1;
              } else {
                  start = mid + 1;
              }
          }
          return start;
      }
  }
