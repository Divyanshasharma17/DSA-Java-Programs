/*
===========================================================
Problem :- Find the index of first occurrence in string
Difficulty :- Easy
===========================================================

Description :-
  Given two strings needle and haystack, return the index of 
  the first occurrence of needle in haystack, or -1 if needle 
  is not part of haystack.

Example 1 :
  Input :- haystack = "sadbutsad", needle = "sad"
  Output :- 0
  Explanation :- "sad" occurs at index 0 and 6. The first 
  occurrence is at index 0, so we return 0.

Example 2 :
  Input :- haystack = "leetcode", needle = "leeto"
  Output :- -1
  Explanation :- "leeto" does not occur in "leetcode".

Constraints :-
  1)- 1 <= haystack.length, needle.length <= 10^4
  2)- haystack and needle consist of only lowercase English characters.

Approach :-
  1. If needle is empty, return 0.
  2. Iterate through haystack from index 0 to haystack.length - needle.length:
     - Compare substring starting at current index with needle character by character.
     - If all characters match, return the current index.
  3. If needle is not found, return -1.

Time Complexity :- O((N-M+1)*M) 
Space Complexity :- O(1)
===========================================================
*/

Solution :-
  public class LinearSearch {
      public int LinearSearch(String haystack, String needle) {
          if (needle.isEmpty()) {
              return 0;
          }
          int hayLen = haystack.length();
          int needleLen = needle.length();
          for (int i = 0; i <= hayLen - needleLen; i++) {
              int j;
              for (j = 0; j < needleLen; j++) {
                  if (haystack.charAt(i + j) != needle.charAt(j)) {
                      break;
                  }
              }
              if (j == needleLen) {
                  return i;
              }
          }
          return -1;
      }
  }
