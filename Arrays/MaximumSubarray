/*
===========================================================
Problem :- Maximum Subarray
Difficulty :- Medium
===========================================================

Description :-
  Given an integer array nums, find the contiguous subarray 
  (containing at least one number) that has the largest sum, 
  and return its sum.

Example 1 :-
  Input :- nums = [-2,1,-3,4,-1,2,1,-5,4]
  Output :- 6

Example 2 :-
  Input :- nums = [1]
  Output :- 1

Example 3 :-
  Input :- nums = [5,4,-1,7,8]
  Output :- 23

Constraints :-
  1) - 1 <= nums.length <= 10^5
  2) - -10^4 <= nums[i] <= 10^4

Approach :-
  1. Use Kadane’s Algorithm to efficiently compute the maximum sum.
  2. Initialize variables to track the current subarray sum and the 
     maximum sum found so far.
  3. Iterate through the array:
     → Add the current element to the running sum.
     → Update the maximum sum if the running sum is greater.
     → Reset the running sum to 0 if it becomes negative.
  4. Return the maximum sum at the end.

Time Complexity :- O(n) 
Space Complexity :- O(1)  
===========================================================
*/

Solution :-
public class MaximumSubarray {
    public int maxSubArray(int[] nums) {
        int sum = 0;
        int maxSum = nums[0];
        for (int num : nums) {
            sum += num;
            if (sum > maxSum) {
                maxSum = sum;
            }
            if (sum < 0) {
                sum = 0;
            }
        }
        return maxSum;
    }
}
