/*
===========================================================
Problem :- Best Time to Buy and Sell Stock
Difficulty :- Easy
===========================================================

Description :-
  You are given an array prices where prices[i] represents 
  the price of a given stock on the i-th day.
  You want to maximize your profit by choosing a single day 
  to buy one stock and choosing a different day in the future 
  to sell that stock. Return the maximum profit you can achieve 
  from this transaction. If no profit is possible, return 0.

Example 1 :-
  Input :- prices = [7,1,5,3,6,4]
  Output :- 5
  Explanation :- Buy on day 2 (price = 1) and sell on day 5 
  (price = 6), profit = 6 - 1 = 5

Example 2 :-
  Input :-  prices = [7,6,4,3,1]
  Output :- 0
  Explanation :- No profitable transaction possible.

Constraints :-
  1)- 1 <= prices.length <= 10^5
  2)- 0 <= prices[i] <= 10^4

Approach :-
  1) Keep track of the minimum price observed so far (buy_price)
  2) For each day:
      → Calculate potential profit as prices[i] - buy_price.
      → Update max_profit if this profit is greater.
      → If prices[i] is less than buy_price, update buy_price.
  3) At the end, max_profit will hold the maximum profit 
    achievable.

Time Complexity :- O(n)  
Space Complexity :- O(1)  
===========================================================
*/

Solution :-
public class BestTimeToBuyAndSellStock {
    public int maxProfit(int[] prices) {
        int maxProfit = 0;
        int buyPrice = prices[0];
        for (int i = 1; i < prices.length; i++) {
            int currentProfit = prices[i] - buyPrice;
            if (currentProfit > maxProfit) {
                maxProfit = currentProfit;
            }
            if (prices[i] < buyPrice) {
                buyPrice = prices[i];
            }
        }
        return maxProfit;
    }
}
