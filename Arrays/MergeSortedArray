/*
===========================================================
Problem :- Merge Sorted Array
Difficulty :- Easy
===========================================================

Description :-
  You are given two integer arrays nums1 and nums2, sorted in 
  non-decreasing order, and two integers m and n, representing 
  the number of elements in nums1 and nums2 respectively.
  Merge nums2 into nums1 so that nums1 becomes a single array 
  sorted in non-decreasing order.

Note :-
  1.nums1 has length m + n, where the first m elements contain 
    meaningful values, and the last n elements are initialized 
    as 0 placeholders.
  2.The merge should be done in-place inside nums1.

Example :-
  Input:  nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
  Output: [1,2,2,3,5,6]

Approach :-
  1) Use three pointers:
      → i = index of last meaningful element in nums1 (m-1)
      → j = index of last element in nums2 (n-1)
      → k = index of last position in nums1 (m+n-1)
  2) Compare elements from the back:
      → Place the larger of nums1[i] and nums2[j] at nums1[k].
      → Decrement respective pointers.
  3) Continue until nums2 is fully merged.

Time Complexity :- O(m + n)
Space Complexity :- O(1)  
===========================================================
*/

Solution :-

  public class MergeSortedArray {
      public void merge(int[] nums1, int m, int[] nums2, int n) {
          int i = m - 1;        // Pointer for nums1 meaningful elements
          int j = n - 1;        // Pointer for nums2
          int k = m + n - 1;    // Pointer for final position in nums1
          // Merge nums2 into nums1 from the end
          while (j >= 0) {
              if (i >= 0 && nums1[i] > nums2[j]) {
                  nums1[k--] = nums1[i--];
              } else {
                  nums1[k--] = nums2[j--];
              }
          }
      }
  }
