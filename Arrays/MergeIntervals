/*
===========================================================
Problem :- Merge Intervals
Difficulty :- Medium
===========================================================

Description :-
  You are given an array of intervals where each interval is 
  represented as [start, end]. The goal is to merge all 
  overlapping intervals and return an array of the resulting 
  non-overlapping intervals that fully cover the input.

Example 1 :-
  Input :- intervals = [[1,3],[2,6],[8,10],[15,18]]
  Output :- [[1,6],[8,10],[15,18]]
  Explanation :- Intervals [1,3] and [2,6] overlap and are merged 
  into [1,6]

Example 2 :-
  Input :- intervals = [[1,4],[4,5]]
  Output :- [[1,5]]
  Explanation :- Intervals [1,4] and [4,5] are considered overlapping.

Example 3 :-
  Input :-  intervals = [[4,7],[1,4]]
  Output :- [[1,7]]
  Explanation :- Intervals [1,4] and [4,7] overlap and merge into [1,7].

Constraints :-
  1)- 1 <= intervals.length <= 10^4
  2)- intervals[i].length == 2
  3)- 0 <= start <= end <= 10^4

Approach :-
  1) Sort intervals based on their start values.
  2) Initialize a list to hold merged intervals.
  3) Traverse each interval:
     → If the current interval overlaps with the last merged one,
       update the end of the last interval.
     → Otherwise, add the current interval as a new entry.
  4) Convert the merged list to an array and return it.

Time Complexity :- O(n log n)  
Space Complexity :- O(n)       
===========================================================
*/

Solution :-
  import java.util.*;
  public class MergeIntervals {
      public int[][] merge(int[][] intervals) {
          if (intervals.length <= 1) {
              return intervals;
          }
          Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
          List<int[]> merged = new ArrayList<>();
          int[] current = intervals[0];
          merged.add(current);
          for (int[] interval : intervals) {
              if (interval[0] <= current[1]) {  
                  current[1] = Math.max(current[1], interval[1]); 
              } else {
                  current = interval; // Start a new interval
                  merged.add(current);
              }
          }
          return merged.toArray(new int[merged.size()][]);
      }
  }
